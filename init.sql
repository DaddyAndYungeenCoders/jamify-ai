/*
 * Copyright (c) 2024, LAPETITTE Matthieu
 * Tous droits réservés.
 *
 * Ce fichier est soumis aux termes de la licence suivante :
 * Vous êtes autorisé à utiliser, modifier et distribuer ce code sous réserve des conditions de la licence.
 * Vous ne pouvez pas utiliser ce code à des fins commerciales sans autorisation préalable.
 *
 * Ce fichier est fourni "tel quel", sans garantie d'aucune sorte, expresse ou implicite, y compris mais sans s'y limiter,
 * les garanties implicites de qualité marchande ou d'adaptation à un usage particulier.
 *
 * Pour toute question ou demande d'autorisation, contactez LAPETITTE Matthieu à l'adresse suivante :
 * matthieu@lapetitte.fr
 */

/*
 * Copyright (c) 2024, LAPETITTE Matthieu
 * Tous droits réservés.
 *
 * Ce fichier est soumis aux termes de la licence suivante :
 * Vous êtes autorisé à utiliser, modifier et distribuer ce code sous réserve des conditions de la licence.
 * Vous ne pouvez pas utiliser ce code à des fins commerciales sans autorisation préalable.
 *
 * Ce fichier est fourni "tel quel", sans garantie d'aucune sorte, expresse ou implicite, y compris mais sans s'y limiter,
 * les garanties implicites de qualité marchande ou d'adaptation à un usage particulier.
 *
 * Pour toute question ou demande d'autorisation, contactez LAPETITTE Matthieu à l'adresse suivante :
 * matthieu@lapetitte.fr
 */

create table engine.public.jam
(
    jam_id              bigint generated by default as identity
        primary key,
    host_id             bigint,
    jam_name            varchar(255),
    jam_scheduled_start timestamp(6),
    jam_status          varchar(255)
        constraint jam_jam_status_check
            check ((jam_status)::text = ANY
                   ((ARRAY ['RUNNING'::character varying, 'PAUSED'::character varying, 'STOPPED'::character varying, 'SCHEDULED'::character varying, 'CANCELED'::character varying])::text[]))
);

create table engine.public.music
(
    music_id        bigint generated by default as identity
        primary key,
    music_author    varchar(255),
    music_energy    varchar(255),
    music_image_src varchar(255),
    music_isrc      varchar(255),
    music_tempo     varchar(255),
    music_title     varchar(255)
);


create table engine.public.tag
(
    tag_id    bigint generated by default as identity
        primary key,
    tag_label varchar(255)
);


create table engine.public.jam_tags
(
    jam_id bigint not null
        constraint fk6nxe8l2adoh1k1f7w0y9cg7ss
            references jam,
    tag_id bigint not null
        constraint fk9fwkv532ho3l496ggxwxl51wn
            references tag,
    primary key (jam_id, tag_id)
);


create table engine.public.music_tag
(
    music_id bigint not null
        constraint fk130nenp61ci8smsrxvt19x6r5
            references music,
    tag_id   bigint not null
        constraint fk63e5vc8dejj3aidknm736v76q
            references tag,
    primary key (music_id, tag_id)
);


create table engine.public.users
(
    user_id              bigint generated by default as identity
        primary key,
    user_country         varchar(255),
    user_email           varchar(255),
    user_has_jam_running boolean,
    user_img_url         varchar(1024),
    user_name            varchar(255),
    user_provider        varchar(255),
    user_provider_id     varchar(255),
    jam_id               bigint
        constraint fkrck4spc7lyo2x0859i4vtso39
            references jam
);


create table engine.public.event
(
    event_id        bigint generated by default as identity
        primary key,
    city            varchar(255),
    country         varchar(255),
    state           varchar(255),
    street          varchar(255),
    zip_code        varchar(255),
    name            varchar(255),
    scheduled_start timestamp(6),
    status          varchar(255)
        constraint event_status_check
            check ((status)::text = ANY
                   ((ARRAY ['SCHEDULED'::character varying, 'CANCELLED'::character varying, 'STARTED'::character varying, 'FINISHED'::character varying])::text[])),
    host_user_id    bigint
        constraint fkornquppgm2jansrowvhfxa1bd
            references users
);


create table engine.public.event_participants
(
    user_id  bigint not null
        constraint fkre6m0d4mgt4351tytlkac9jvf
            references users,
    event_id bigint not null
        constraint fk5232w1ta0icpkemgsxyw8a976
            references event,
    primary key (user_id, event_id)
);


alter table engine.public.jam
    add constraint fkkqcb6hoirf4kyjw67v0xskgxo
        foreign key (host_id) references users;

create table engine.public.jam_message
(
    jam_message_id        bigint generated by default as identity
        primary key,
    jam_message_content   varchar(255),
    jam_message_timestamp timestamp(6),
    user_id               bigint
        constraint fk8v26yavj9o6joj47x1syewm79
            references users,
    jam_id                bigint
        constraint fkep5f1d01wnbpadeujs5815uuo
            references jam
);


create table engine.public.jam_participant
(
    jam_id  bigint not null
        constraint fktlkjpl2vd7vmkqqfhj9o9nj63
            references jam,
    user_id bigint not null
        constraint fk8tc26td12bcoum2uiva45nn4e
            references users,
    primary key (jam_id, user_id)
);


create table engine.public.playlist
(
    playlist_id          bigint generated by default as identity
        primary key,
    playlist_like_number integer,
    playlist_name        varchar(255),
    author_id            bigint
        constraint fk9v9685q5sbpux27ful5s6scw9
            references users
);


create table engine.public.playlist_music
(
    playlist_id bigint not null
        constraint fkq9o07ljjk03aeeqt0q9lwhndk
            references playlist,
    music_id    bigint not null
        constraint fk5g0xtl5e89uycye0jo1ll65sq
            references music,
    primary key (playlist_id, music_id)
);


create table engine.public.user_access_tokens
(
    id           bigint generated by default as identity
        primary key,
    access_token varchar(512),
    expires_at   timestamp(6),
    provider     varchar(255),
    user_user_id bigint
        constraint ukqdpottgytc1007lm3v5vds8vv
            unique
        constraint fkkx2jt8sec0y6m2uwmvadqmf19
            references users
);


create table engine.public.user_roles
(
    user_id   bigint not null
        constraint fkhfh9dx7w3ubf1co1vdev94g3f
            references users,
    user_role varchar(255)
);


